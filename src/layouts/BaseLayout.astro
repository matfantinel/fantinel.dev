---
import "@styles/global.scss";
import dateformat from "dateformat";
import metaConfig from "@public/cms/meta.yml";
import type { SiteMeta } from "@schemas/site-meta";
import Head from "@layouts/Head.astro";

const { 
	title,
	keywords,
	description,
	image,
	autoGenerateImage,
	slug,
	published_date,
	modified_date,
} : {
	title?: string;
	keywords?: string[];
	description?: string;
	image?: string;
	autoGenerateImage?: boolean;
	slug?: string;
	published_date?: string;
	modified_date?: string;
} = Astro.props;

const siteMeta: SiteMeta = metaConfig;

const pageTitle = title ? `${title} - ${siteMeta.title}` : siteMeta.title;
const pageDescription = description || siteMeta.description;
const pageKeywords = keywords ? [...keywords, ...siteMeta.keywords] : siteMeta.keywords;

let pageImage = image;
if (!image && autoGenerateImage && title) {
  pageImage = `${siteMeta.baseUrl}/opengraph?title=${encodeURIComponent(title)}`;
	if (published_date) {
		pageImage += `&subtitle=${encodeURIComponent(
			dateformat(published_date, 'mmm dd, yyyy')
		)}`;
	}
} else if (!image) {
	pageImage = siteMeta.image;
}

---

<!doctype html>
<html lang="en" data-theme="auto">
	<head>
		
		<Head />
		
		<title>{pageTitle}</title>
		<meta property="og:title" content={pageTitle} />
		{siteMeta.author?.name && <meta name="author" content={siteMeta.author.name} />}

		<meta name="description" content={pageDescription} />
		<meta property="og:description" content={pageDescription} />
		<meta name="keywords" content={pageKeywords.join(', ')} />

		{published_date && <meta property="article:published_time" content={published_date} />}
		{modified_date && <meta property="article:modified_time" content={modified_date} />}

		<meta property="og:image" content={pageImage} />

		<link rel="canonical" href={`${siteMeta.baseUrl}/${slug}`} />
	</head>
	<body>
		<div class="u-noise"></div>
		<slot />
		<script>
			import(/* @vite-ignore */ '@stefanjudis/sparkly-text');

			document.addEventListener('DOMContentLoaded', () => {
				// Add smooth-scroll class to html element on page load
				// Instead of adding it directly to the element.
				// This is because, when navigating between pages using the same layout,
				// The page is scrolled to the top. With smooth scrolling enabled, this causes a
				// weird animation.
				const root = document.getElementsByTagName('html')[0];
				root.classList.add('smooth-scroll');

				// Send page view event to Plausible
				// The pageview is registed automatically, but this allows
				// us to send additional data, such as the theme preference
				if (window) {
					// @ts-ignore
					const { plausible } = window;
					if (plausible) {
						if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
							plausible('pageview', { props: { theme_preference: 'Dark' } });
						} else if (
							window.matchMedia &&
							window.matchMedia('(prefers-color-scheme: light)').matches
						) {
							plausible('pageview', { props: { theme_preference: 'Light' } });
						} else {
							plausible('pageview', { props: { theme_preference: 'None' } });
						}
					}
				}

				// Add helper class for focus styles
				if (document?.body) {
					document.body.addEventListener('keydown', () => {
						document.body.classList.add('keyboard-in-use');
					});
					document.body.addEventListener('mousedown', () => {
						document.body.classList.remove('keyboard-in-use');
					});
				}
			});

		</script>

		<noscript>
			<style>
				*:focus-visible {
					outline: 2px dashed var(--theme--color-accent);
					outline-offset: 4px;
				}
			</style>
		</noscript>
	</body>
</html>

<style lang="scss">
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;

		.u-noise {
			z-index: 1;
		}

		:global(main) {
			position: relative;
			z-index: 2;
		}
	}
</style>
