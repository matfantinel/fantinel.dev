---
import Image from '@components/atoms/Image';
import MarkdownRenderer from '@components/molecules/MarkdownRenderer';
import PostHero from '@components/organisms/PostHero';
import type { BlogPost } from '@schemas/blog';
import { handleCmsMediaPath } from '@utils/functions';
import BaseLayout from './BaseLayout.astro';
import Header from '@components/organisms/Header';
import Footer from '@components/organisms/Footer';
import TableOfContents from '@components/molecules/TableOfContents';
import metaConfig from '@public/cms/meta.yml';
import type { SiteMeta } from '@schemas/site-meta';
import CoolLinksImage from '@components/molecules/CoolLinksImage';
import { title } from 'process';
import AboutAuthor from '@components/organisms/AboutAuthor';
import BlogPostCard from '@components/molecules/BlogPostCard';
import BlogPostCards from '@components/molecules/BlogPostCards';
import SectionHeader from '@components/molecules/SectionHeader';
import NewsletterCta from '@components/organisms/NewsletterCta';

interface Props {
  post: {
    body?: string;
    data: BlogPost;
  };
}

const { post }: Props = Astro.props;

const showToc = post.data.showToc && post.data.toc && post.data.toc.length > 0;

const siteMeta: SiteMeta = metaConfig;
let coverImage;
if (post.data.coverImage) {
  if (post.data.coverImage.includes(siteMeta.baseUrl)) {
    coverImage = post.data.coverImage;
  } else {
    coverImage = `${siteMeta.baseUrl}${handleCmsMediaPath(post.data.coverImage)}`;
  }
}

const isCoolLinksImage = Boolean(coverImage?.includes('/opengraph/cool-links'));
const imageUrl = isCoolLinksImage && coverImage ? new URL(coverImage) : null;
const coolLinksImageParams = isCoolLinksImage
  ? {
      title: imageUrl?.searchParams.get('title') ?? title,
      date: imageUrl?.searchParams.get('date') ? new Date(imageUrl.searchParams.get('date') as string) : new Date(),
    }
  : null;
---

<BaseLayout
  title={post.data.title}
  keywords={post.data.categories}
  description={post.data.excerpt}
  image={coverImage}
  autoGenerateImage={!post.data.coverImage}
  slug={`blog/${post.data.slug}`}
  published_date={post.data.date}
  modified_date={post.data.updated}
>
  <Header class='l-post__header' client:load />

  <main class='l-post'>
    <div class='l-post__container'>
      <PostHero
        class='l-post__hero'
        title={post.data.title}
        slug={post.data.slug}
        author={post.data.author}
        date={post.data.date}
        updated={post.data.updated}
        readingTime={post.data.readingTime}
        tags={post.data.categories}
        client:load
      />

      <div
        class={[
          'l-post__content-wrapper',
          showToc ? 'l-post__content-wrapper--has-toc u-container' : 'u-container-small',
          post.data.coverImage ? 'l-post__content-wrapper--has-image' : '',
        ].join(' ')}
      >
        {showToc && <TableOfContents class='l-post__toc' headings={post.data.toc} client:load />}

        {
          post.data.coverImage &&
            (isCoolLinksImage && coolLinksImageParams ? (
              <CoolLinksImage
                class='l-post__cover-image'
                title={coolLinksImageParams.title}
                date={coolLinksImageParams.date}
              />
            ) : (
              <Image
                class='l-post__cover-image'
                src={handleCmsMediaPath(post.data.coverImage!)}
                alt={post.data.coverImageAlt}
                lazy={false}
              />
            ))
        }

        <div
          id='post-content'
          class={['l-post__content', 'u-markdown', showToc ? false : 'l-post__content--full'].filter(Boolean).join(' ')}
        >
          <MarkdownRenderer content={post.body} client:load />
        </div>
      </div>

      <div class='l-post__after-content'>
        {
          post.data.author && (
            <AboutAuthor
              kicker='Written by'
              name={post.data.author.name}
              bio={post.data.author.shortBio}
              image={post.data.author.image}
              extraImages={post.data.author.extraImages}
              socials={post.data.author.socials}
              button={{ text: 'About', url: '/about' }}
              client:load
            />
          )
        }

        {siteMeta.newsletterCta && (
          <NewsletterCta
            heading={siteMeta.newsletterCta.heading}
            body={siteMeta.newsletterCta.body}
            tag="cta-after-post-content"
          />
        )}

        {
          post.data.relatedPosts && (
            <div class='l-post__related-posts'>
              <SectionHeader 
                title="You might also like"
                button={{
                  text: 'View all',
                  url: '/blog'
                }} 
              />
              <BlogPostCards class='l-post__related-posts-grid' maxPerRow={2}>
                {post.data.relatedPosts.map((relatedPost) => (
                  <BlogPostCard
                    title={relatedPost.title}
                    slug={relatedPost.slug}
                    url={`/blog/${relatedPost.slug}`}
                    image={relatedPost.coverImage}
                    imageAlt={relatedPost.coverImageAlt}
                    readingTime={relatedPost.readingTime}
                    excerpt={relatedPost.excerpt}
                    tags={relatedPost.categories?.slice(0, 1)}
                    hideImage
                  />
                ))}
              </BlogPostCards>
            </div>
          )
        }
      </div>
    </div>
  </main>

  <Footer socials={siteMeta.author?.socials} client:load />
</BaseLayout>

<style lang='scss'>
  @use '/src/styles/breakpoints';
  @use '/src/styles/mixins';
  @use '/src/styles/typography';

  .l-post {
    --toc-width: 240px;

    :global(.l-post__hero) {
      background-color: var(--theme--background-accent-color);
      border-bottom-left-radius: var(--border-radius);
      border-bottom-right-radius: var(--border-radius);
    }

    &__container {
      display: flex;
      flex-direction: column;
      gap: var(--spacing-xxl);

      @include breakpoints.for-phone-only {
        gap: var(--spacing-xl);
      }
    }

    &__content-wrapper {
      display: grid;
      align-items: start;
      gap: var(--spacing-xl) var(--spacing-lg);
      grid-template-columns: 100%;
      grid-template-areas: 'content';

      &--has-image {
        grid-template-areas:
          'cover-image'
          'content';
      }

      &--has-toc {
        grid-template-columns: calc(100% - var(--toc-width) - var(--spacing-lg)) var(--toc-width);
        grid-template-areas: 'content toc';
      }

      &--has-image.l-post__content-wrapper--has-toc {
        grid-template-areas:
          'cover-image toc'
          'content toc';
      }

      @include breakpoints.for-tablet-portrait-down {
        grid-template-columns: 100% !important;

        &--has-image {
          grid-template-areas:
            'cover-image'
            'content';
        }

        &--has-toc {
          grid-template-areas:
            'toc'
            'content';
        }

        &--has-image.l-post__content-wrapper--has-toc {
          grid-template-areas:
            'cover-image'
            'toc'
            'content';
        }
      }
    }

    &__content {
      grid-area: content;

      &--full {
        width: 100%;
      }

      @include breakpoints.for-tablet-portrait-down {
        width: 100%;
      }
    }

    :global(.l-post__toc) {
      grid-area: toc;
      position: sticky;
      top: var(--spacing-lg);

      @include breakpoints.for-tablet-portrait-down {
        position: unset;
      }
    }

    :global(.l-post__cover-image) {
      grid-area: cover-image;

      display: block;
      margin-left: auto;
      margin-right: auto;

      max-width: 100%;
      width: 100%;
      height: auto;

      box-shadow: var(--theme--shadow-image);
      border-radius: var(--border-radius--small);
    }

    :global(.m-cool-links-image) {
      pointer-events: none;
      aspect-ratio: 1200 / 630;
    }

    &__after-content {
      margin-top: var(--spacing-xxl);

      display: flex;
      flex-direction: column;
      gap: var(--spacing-xxl);

      @include breakpoints.for-phone-only {
        margin-top: var(--spacing-xl);
        gap: var(--spacing-xl);
      }
    }

    &__related-posts {
      @include mixins.padded-container;
      display: flex;
      flex-direction: column;
      gap: var(--spacing-xl);
      margin-top: var(--spacing-xxl);
    }
  }

  :global(.l-post__header) {
    background-color: var(--theme--background-accent-color);
  }
</style>
