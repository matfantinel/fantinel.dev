---
import Pagination from '@components/molecules/Pagination';
import QuickReviewCard from '@components/molecules/QuickReviewCard';
import QuickReviewCards from '@components/molecules/QuickReviewCards';
import BlogArchiveHero from '@components/organisms/BlogArchiveHero';
import type { QuickReview } from '@schemas/quick-review';
import BaseLayout from './BaseLayout.astro';
import { QuickReviewType, QuickReviewRating } from '@schemas/quick-review-types';
import metaConfig from '@public/cms/meta.yml';
import type { SiteMeta } from '@schemas/site-meta';
const siteMeta: SiteMeta = metaConfig;

interface Props {
  reviews: QuickReview[];
  currentPage: number;
  totalPages: number;
  currentType?: QuickReviewType;
  // currentRating?: QuickReviewRating;
}

const { reviews, currentPage, totalPages, currentType }: Props = Astro.props;

const allTypes = Object.keys(QuickReviewType).map((key) => key);
// const allRatings = Object.keys(QuickReviewRating).map((key) => key);

// { name: string; slug: string; url: string; active?: boolean }
const typeTags = allTypes.map((type) => {
  const isActive = type.toLowerCase() === currentType?.toLowerCase();
  return {
    name: QuickReviewType[type as keyof typeof QuickReviewType] + 's',
    slug: type.toLowerCase(),
    url: isActive ? `/quick-reviews` : `/quick-reviews/${type.toLowerCase()}`,
    active: isActive,
  };
});

// const ratingTags = allRatings.map((rating) => {
//   const isActive = rating.toLowerCase() === currentRating?.toLowerCase();
//   return {
//     name: QuickReviewRating[rating as keyof typeof QuickReviewRating],
//     slug: rating.toLowerCase(),
//     url: isActive ? `/quick-reviews` : `/quick-reviews/${rating.toLowerCase()}`,
//     active: isActive,
//   }
// });
---

<BaseLayout
  title='Quick Reviews'
  image={siteMeta.baseUrl + '/cms/media/articles/quick-reviews-cover.jpg'}
  description="A special place to dump my unsolicited opinions of pieces of media!"
  hasHeaderBackground
>
  <main class='l-quick-reviews-archive' style='view-transition-name: blog-archive-hero'>
    <div class='l-quick-reviews-archive__container' data-pagefind-body>
      <BlogArchiveHero
        class='l-quick-reviews-archive__hero'
        title='Quick Reviews'
        body='Since June 2024, I started writing quick reviews of movies, TV shows and games I’ve watched or played. Here’s every one of them.'
        tags={typeTags}
      />

      <div class='l-quick-reviews-archive__content-wrapper u-container'>
        <div class='u-container-small u-markdown'>
          <p>
            This idea and overall review layout were totally stolen from Matt Birchler and his <a
              href='https://quickreviews.app'
              target='_blank'
            >
              Quick Reviews
            </a> web app. Check it out if you want to create yours!
          </p>
        </div>

        {!reviews.length && <p class='u-h4'>No reviews found</p>}

        {
          // I'm passing reviews as a prop here to avoid having multiple
          // Elements with client:load. Having multiple islands like that
          // can cause issues.
          reviews && (            
            <QuickReviewCards reviews={reviews} client:load />
          )
        }

        {
          totalPages > 1 && (
            <Pagination
              class='l-quick-reviews-archive__pagination'
              currentPage={currentPage}
              totalPages={totalPages}
              baseUrl={`/quick-reviews`}
            />
          )
        }
      </div>
    </div>
  </main>
</BaseLayout>

<style lang='scss'>
  @use '/src/styles/breakpoints';
  @use '/src/styles/typography';

  .l-quick-reviews-archive {
    :global(.l-quick-reviews-archive__hero) {
      background-color: var(--theme--background-accent-color);
      border-bottom-left-radius: var(--border-radius);
      border-bottom-right-radius: var(--border-radius);
    }

    &__container {
      display: flex;
      flex-direction: column;
      gap: var(--spacing-xxl);

      @include breakpoints.for-phone-only {
        gap: var(--spacing-xl);
      }
    }

    &__content-wrapper {
      display: flex;
      flex-direction: column;
      gap: var(--spacing-lg);
    }
  }
</style>
